// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mongodb"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  email         String            @unique
  password      String?
  phone         Int?
  name          String?
  image         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  tokens        Token[]
  accounts      Account[]
  products      Product[]
  favorites     ProductFavorite[]
  posts         Post[]
  postAnswers   PostAnswer[]
  postWondering PostWondering[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  provider          String
  providerAccountId String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken       String?
  tokenType         String?
  scope             String?

  @@unique([provider, providerAccountId])
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String            @db.ObjectId
  name        String
  image       String?
  price       Int
  description String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  favorites   ProductFavorite[]
}

model ProductFavorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String          @db.ObjectId
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  question  String
  answers   PostAnswer[]
  wondering PostWondering[]
}

model PostAnswer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    String
}

model PostWondering {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
